/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { OrionAccordionToggleEventData } from "./components/orion-accordion/orion-accordion";
import { OrionButtonTypeOptions, OrionButtonVariantOptions } from "./components/orion-button/orion-button";
import { OrionChipVariantOptions } from "./components/orion-chip/orion-chip";
import { Headers, OrionCheckboxColumnToggledEvent, OrionTableUpdatedEvent, Rows } from "./components/orion-data-table/orion-data-table";
import { BaseOptions } from "flatpickr/dist/types/options";
import { DateSelectionEvent } from "./components/orion-date-input/orion-date-input";
import { OrionDrawerOpenOptions } from "./components/orion-drawer/orion-drawer";
import { OrionHeaderHeadingPlacementOptions, OrionHeaderLogoPlacementOptions } from "./components/orion-header/orion-header";
import { OrionLinkTargetOptions } from "./components/orion-link/orion-link";
import { OrionMessageVariantOptions } from "./components/orion-message/orion-message";
import { OrionSizeOptions } from "./components/orion-progress-meter/orion-progress-meter";
import { Alignment } from "./components/orion-data-table/orion-data-table";
import { TabSelectionEvent } from "./components/orion-tabs/orion-tabs";
import { OrionTextInputTypeOptions } from "./components/orion-text-input/orion-text-input";
export namespace Components {
    interface OrionAccordion {
        /**
          * Chevrons are on the right by default
         */
        "chevronLeft": boolean;
        /**
          * Accordion container border
         */
        "hasContainer": boolean;
        /**
          * Accordion is closed by default
         */
        "open": boolean;
    }
    interface OrionButton {
        /**
          * The disabled state
         */
        "disabled": boolean;
        /**
          * The icon name
         */
        "iconName": string;
        /**
          * The icon position
         */
        "iconRight": boolean;
        /**
          * The small state
         */
        "small": boolean;
        /**
          * The sticky state. A default button will display on desktop.
         */
        "sticky": boolean;
        /**
          * The sticky state for mobile only. Button will hide on desktop.
         */
        "stickyMobile": boolean;
        /**
          * The button type
         */
        "type": OrionButtonTypeOptions;
        /**
          * The button variant
         */
        "variant": OrionButtonVariantOptions;
    }
    interface OrionCheckbox {
        /**
          * The checked state of the checkbox
         */
        "checked": boolean;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * The indeterminate state of the checkbox (overridden by checked if both are true)
         */
        "indeterminate": boolean;
        /**
          * The input name
         */
        "name": string;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * The input value
         */
        "value": string;
    }
    interface OrionCheckboxGroup {
        /**
          * Disable all checkboxes in group
         */
        "disabled": boolean;
        /**
          * The inline state of the checkbox group
         */
        "inline": boolean;
    }
    interface OrionChip {
        /**
          * Toggles the ability to dismiss the chip via a close button on right of the chip
         */
        "dismissible": boolean;
        /**
          * Prop used to show/hide chip
         */
        "isOpen": boolean;
        /**
          * Prop used to to display a solid background color
         */
        "solidBg": boolean;
        /**
          * Stylistic variations for the chip type. - **success** - results in a green chip - **high** - results in a red chip - **medium** - results in an orange chip - **low** - results in a yellow chip - **info** - results in a blue chip - **custom** - results in a custom color chip (see `--orion-chip-color__bg` and `--orion-chip-color__text` css variables)
         */
        "variant": OrionChipVariantOptions;
    }
    interface OrionDataTable {
        /**
          * Adds in a checkbox column to the left hand side of the table
         */
        "checkbox": boolean;
        /**
          * An array of column headers
         */
        "headers": Headers;
        /**
          * Hides columns by index
         */
        "hiddenColumns": number[];
        /**
          * Pins n columns to the left hand side of the table
         */
        "pin": number;
        /**
          * A 2D array for row data
         */
        "rows": Rows;
        /**
          * Controls whether the table should be sortable or not
         */
        "sortable": boolean;
        /**
          * Visual variant for table
         */
        "variant": 'lined' | 'striped';
    }
    interface OrionDateCalendarModal {
        /**
          * Format to be used by the date inputs & calendar Follows spec at https://flatpickr.js.org/formatting/
         */
        "dateFormat": string;
        /**
          * Selected dates to show
         */
        "dates": string[];
        /**
          * Label for first date
         */
        "firstDateLabel": string;
        /**
          * Config for flatpickr
         */
        "flatpickrConfig": Partial<BaseOptions>;
        /**
          * Whether the modal is open or not
         */
        "isOpen": boolean;
        /**
          * Label to appear at the top of the modal
         */
        "label": string;
        /**
          * If the flatpickr config is ranged or not
         */
        "range": boolean;
        /**
          * Label for second date
         */
        "secondDateLabel"?: string | undefined;
        /**
          * Month that flatpickr calendar starts at TODO: base this off min date or create a buffer + scroll to current month
         */
        "startingDate": Date;
    }
    interface OrionDateInput {
        /**
          * Format to be used by the date inputs & calendar Follows spec at https://flatpickr.js.org/formatting/
         */
        "dateFormat": string;
        /**
          * Disabled state of input
         */
        "disabled": boolean;
        /**
          * Error state of input
         */
        "error": boolean;
        /**
          * Shows the first-label inline with the input
         */
        "inline": boolean;
        /**
          * Inclusive maximum date (time is removed from limit)
         */
        "maxDate"?: Date | string;
        /**
          * Inclusive minimum date (time is removed from limit)
         */
        "minDate"?: Date | string;
        /**
          * Makes the calendar show two months
         */
        "multiMonth": boolean;
        /**
          * Placeholder for the date inputs
         */
        "placeholder": string;
        /**
          * Shows two inputs, and calendar is in range mode
         */
        "range": boolean;
    }
    interface OrionDrawer {
        /**
          * Prop used to show/hide drawer
         */
        "isOpen": boolean;
        /**
          * Animates drawer in from left, right, or bottom
         */
        "openFrom": OrionDrawerOpenOptions;
    }
    interface OrionDropdown {
        /**
          * Disabled state of dropdown
         */
        "disabled": boolean;
        /**
          * Error state of dropdown
         */
        "error": boolean;
        "isOpen": boolean;
        /**
          * form name of dropdown
         */
        "name": string;
        "placeholder": string;
        /**
          * Required attribute
         */
        "required": boolean;
        "summary": string;
        /**
          * value of currently selected option
         */
        "value": string;
    }
    interface OrionDropdownOption {
        /**
          * The checked state of the dropdown option
         */
        "checked": boolean;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Focuses the dropdown option
         */
        "focusable": boolean;
        /**
          * The label for the input element passed in as a slot
         */
        "label": string;
        /**
          * The input name
         */
        "name": string;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * The input value
         */
        "value": string;
    }
    interface OrionError {
    }
    interface OrionHeader {
        /**
          * Application/page title heading
         */
        "heading": string;
        /**
          * Heading placement (left, center, right). Defaults to center.
         */
        "headingPlacement": OrionHeaderHeadingPlacementOptions;
        /**
          * Logo alt text
         */
        "logoAlt": string;
        /**
          * Logo HREF
         */
        "logoHref"?: string;
        /**
          * Logo placement (left, center, right). Defaults to left.
         */
        "logoPlacement": OrionHeaderLogoPlacementOptions;
        /**
          * Hide logo
         */
        "noLogo": boolean;
        /**
          * Application/page title subheading
         */
        "subheading": string;
    }
    interface OrionLabel {
        /**
          * Shows the disabled state
         */
        "disabled": boolean;
        /**
          * Shows the error state
         */
        "error": boolean;
    }
    interface OrionLink {
        /**
          * The link disabled state
         */
        "disabled": boolean;
        /**
          * The link download
         */
        "download": string;
        /**
          * The link href
         */
        "href": string;
        /**
          * The icon position
         */
        "iconLeft": boolean;
        /**
          * The icon name
         */
        "iconName": string;
        /**
          * No underline
         */
        "noUnderline": boolean;
        /**
          * The link rel
         */
        "rel": string;
        /**
          * The link target
         */
        "target": OrionLinkTargetOptions;
    }
    interface OrionList {
    }
    interface OrionListItem {
        /**
          * Disables the list item
         */
        "disabled": boolean;
        /**
          * Adds an icon to the list item
         */
        "hasIcon": boolean;
        /**
          * Adds a marker to the list item
         */
        "hasMarker": boolean;
        /**
          * Adds a trailing icon to the list item. The href property will add a trailing icon automatically
         */
        "hasTrailingIcon": boolean;
        /**
          * Adds a link to the list item. Trailing icon will be added automatically
         */
        "href": string;
        /**
          * Name of the icon to be added to the list item
         */
        "iconName": string;
        /**
          * Name of the trailing icon to be added to the list item. Deaults to chevron_right
         */
        "trailingIconName": string;
    }
    interface OrionMessage {
        /**
          * Toggles the ability to dismiss the message via a close button in the top right of the message
         */
        "dismissible": boolean;
        /**
          * Toggles the display of the icon in the top left of the message
         */
        "hasIcon": boolean;
        /**
          * Optional heading text for the message that appears above message body message
         */
        "heading": string;
        /**
          * Prop used to show/hide message
         */
        "isOpen": boolean;
        /**
          * Optional time for the mobile overlay to display in milliseconds. Default is 3000.
         */
        "overlayTime": number;
        /**
          * Stylistic variations for the message type. - **success** - results in a green message - **success-overlay** - results in a full screen overlay on mobile - **high** - results in a red message - **medium** - results in an orange message - **low** - results in a yellow message - **info** - results in a blue message
         */
        "variant": OrionMessageVariantOptions;
    }
    interface OrionModal {
        /**
          * Toggles visibility of the close icon in the top right of the modal
         */
        "hasCancelIcon": boolean;
        /**
          * Adds an icon to the modal header
         */
        "hasIcon": boolean;
        /**
          * Name of the icon to be added to the modal header
         */
        "iconName": string;
        /**
          * Set this to have the modal take up the full screen
         */
        "isFullscreen": boolean;
        /**
          * Set this to have the modal take up the full screen on mobile only
         */
        "isFullscreenMobile": boolean;
        /**
          * Toggles the visibility of the modal
         */
        "isOpen": boolean;
        /**
          * Set this to center-align the modal title
         */
        "isTitleCentered": boolean;
        /**
          * Disables the primary button
         */
        "primaryButtonDisabled": boolean;
        /**
          * Disables the secondary button
         */
        "secondaryButtonDisabled": boolean;
    }
    interface OrionNavButton {
        /**
          * The icon name
         */
        "iconName": string;
        /**
          * The active state of the button
         */
        "isActive": boolean;
        /**
          * The position of the label
         */
        "labelPosition": 'left' | 'right';
    }
    interface OrionNavMenu {
        /**
          * Toggles visibility of the close icon in the right of the nav menu header
         */
        "hasCloseIcon": boolean;
        /**
          * Prop used to show/hide nav menu
         */
        "isOpen": boolean;
    }
    interface OrionNote {
    }
    interface OrionPopover {
        /**
          * The placement of the popper relative to its trigger
         */
        "placement": | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * width should be between 100px and 640px
         */
        "popperWidth": number;
    }
    interface OrionProgressMeter {
        /**
          * Shows progress meter in circle format
         */
        "isCircle": boolean;
        /**
          * The maximum possible value
         */
        "max": number;
        /**
          * The percent of target value where progress meter color will change from error to warn (decimal value between 0 and 1)
         */
        "percentOfTarget": number;
        /**
          * Amount of segments to divide progress meter into
         */
        "segments": number;
        /**
          * Display value in center of circle
         */
        "showValue": boolean;
        /**
          * The circle size
         */
        "size": OrionSizeOptions;
        /**
          * The target value
         */
        "target": number;
        /**
          * The current value
         */
        "value": number;
    }
    interface OrionRadioButton {
        /**
          * The checked state of the radio button
         */
        "checked": boolean;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Focuses the radio button. This method is used internally by the `orion-radio-button-group` component. Do not use it directly. Use the `orion-radio-button-group` component instead.
         */
        "focusable": boolean;
        /**
          * The input name
         */
        "name": string;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * The input value
         */
        "value": string;
    }
    interface OrionRadioButtonGroup {
        /**
          * Disabled radio group
         */
        "disabled": boolean;
        /**
          * The inline display of the radio group
         */
        "inline": boolean;
        /**
          * form name of radio buttons
         */
        "name": string;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * value of currently checked radio button
         */
        "value": string;
    }
    interface OrionStepper {
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * Hide the current tally
         */
        "hideTally": boolean;
        /**
          * Max value that the stepper can be incremented to
         */
        "max": number;
        /**
          * Min value that the stepper can be decremented to
         */
        "min": number;
        /**
          * Step size to increment/decrement
         */
        "step": number;
        /**
          * The current value
         */
        "value": number;
    }
    interface OrionSubheader {
        /**
          * Toggles visibility of the close icon in the right of the subheader
         */
        "hasCloseIcon": boolean;
        /**
          * Prop used to show/hide subheader
         */
        "isOpen": boolean;
    }
    interface OrionTab {
    }
    interface OrionTabPanel {
        /**
          * Specifies which orion-tabs element this panel is bound to. Set by a parent orion-tabs component.
         */
        "for": string;
        /**
          * Marks the panel as active or not
         */
        "isActive": boolean;
        /**
          * Index of tab that controls if this panel is active. Set by a parent orion-tabs component.
         */
        "panelIndex": number;
    }
    interface OrionTable {
        /**
          * Controls whether the table should be sortable or not
         */
        "sortable": boolean;
        /**
          * Visual variant for table
         */
        "variant": 'lined' | 'striped';
    }
    interface OrionTableCell {
    }
    interface OrionTableHeader {
        /**
          * Sets the text alignment for the column
         */
        "align": Alignment;
    }
    interface OrionTableRow {
    }
    interface OrionTabs {
        /**
          * Default and current active tab index
         */
        "activeTab": number;
        /**
          * The minimum width for tabs
         */
        "minTabWidth": string;
        /**
          * Component will scroll to the starting active tab
         */
        "scrollToStartingActiveTab": boolean;
    }
    interface OrionTextInput {
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "autocomplete": string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "dirname": string;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "form": string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "list": string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "maxlength": number;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "minlength": number;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "multiple": boolean;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "name": string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "pattern": string;
        /**
          * The input placeholder
         */
        "placeholder": string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "readonly": boolean;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * The input type
         */
        "type": OrionTextInputTypeOptions;
        /**
          * The input value
         */
        "value": string;
    }
    interface OrionTextarea {
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "autocorrect": string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "autofocus": boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "cols": number;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Shows error state
         */
        "error": boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "form": string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "maxLength": number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "minLength": number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "name": string;
        /**
          * The input placeholder
         */
        "placeholder": string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "readonly": boolean;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * Shows the resize option
         */
        "resize": boolean;
        /**
          * Shows the resize horizonal-only option
         */
        "resizeHorizontal": boolean;
        /**
          * Shows the resize vertical-only option
         */
        "resizeVertical": boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "rows": number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "spellcheck": boolean;
        /**
          * The input value
         */
        "value": string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "wrap": string;
    }
    interface OrionToggle {
        /**
          * The checked state of the toggle
         */
        "checked": boolean;
        /**
          * Disables interactions
         */
        "disabled": boolean;
        /**
          * Justify the content of the toggle and label
         */
        "justify": boolean;
        /**
          * The input name
         */
        "name": string;
        /**
          * Required attribute
         */
        "required": boolean;
        /**
          * The input value
         */
        "value": string;
    }
    interface OrionToggleGroup {
        /**
          * Disable all toggles in group
         */
        "disabled": boolean;
        /**
          * The inline state of the toggle group
         */
        "inline": boolean;
        /**
          * Justify the content of the toggle group
         */
        "justify": boolean;
    }
    interface OrionTooltip {
        "tooltipPosition": 'top' | 'bottom';
        "tooltipWidth": number;
    }
}
export interface OrionAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionAccordionElement;
}
export interface OrionCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionCheckboxElement;
}
export interface OrionDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDataTableElement;
}
export interface OrionDateCalendarModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDateCalendarModalElement;
}
export interface OrionDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDateInputElement;
}
export interface OrionDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDrawerElement;
}
export interface OrionDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDropdownElement;
}
export interface OrionDropdownOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionDropdownOptionElement;
}
export interface OrionModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionModalElement;
}
export interface OrionNavMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionNavMenuElement;
}
export interface OrionRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionRadioButtonElement;
}
export interface OrionRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionRadioButtonGroupElement;
}
export interface OrionStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionStepperElement;
}
export interface OrionSubheaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionSubheaderElement;
}
export interface OrionTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionTableRowElement;
}
export interface OrionTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionTabsElement;
}
export interface OrionTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionTextInputElement;
}
export interface OrionTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionTextareaElement;
}
export interface OrionToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLOrionToggleElement;
}
declare global {
    interface HTMLOrionAccordionElement extends Components.OrionAccordion, HTMLStencilElement {
    }
    var HTMLOrionAccordionElement: {
        prototype: HTMLOrionAccordionElement;
        new (): HTMLOrionAccordionElement;
    };
    interface HTMLOrionButtonElement extends Components.OrionButton, HTMLStencilElement {
    }
    var HTMLOrionButtonElement: {
        prototype: HTMLOrionButtonElement;
        new (): HTMLOrionButtonElement;
    };
    interface HTMLOrionCheckboxElement extends Components.OrionCheckbox, HTMLStencilElement {
    }
    var HTMLOrionCheckboxElement: {
        prototype: HTMLOrionCheckboxElement;
        new (): HTMLOrionCheckboxElement;
    };
    interface HTMLOrionCheckboxGroupElement extends Components.OrionCheckboxGroup, HTMLStencilElement {
    }
    var HTMLOrionCheckboxGroupElement: {
        prototype: HTMLOrionCheckboxGroupElement;
        new (): HTMLOrionCheckboxGroupElement;
    };
    interface HTMLOrionChipElement extends Components.OrionChip, HTMLStencilElement {
    }
    var HTMLOrionChipElement: {
        prototype: HTMLOrionChipElement;
        new (): HTMLOrionChipElement;
    };
    interface HTMLOrionDataTableElement extends Components.OrionDataTable, HTMLStencilElement {
    }
    var HTMLOrionDataTableElement: {
        prototype: HTMLOrionDataTableElement;
        new (): HTMLOrionDataTableElement;
    };
    interface HTMLOrionDateCalendarModalElement extends Components.OrionDateCalendarModal, HTMLStencilElement {
    }
    var HTMLOrionDateCalendarModalElement: {
        prototype: HTMLOrionDateCalendarModalElement;
        new (): HTMLOrionDateCalendarModalElement;
    };
    interface HTMLOrionDateInputElement extends Components.OrionDateInput, HTMLStencilElement {
    }
    var HTMLOrionDateInputElement: {
        prototype: HTMLOrionDateInputElement;
        new (): HTMLOrionDateInputElement;
    };
    interface HTMLOrionDrawerElement extends Components.OrionDrawer, HTMLStencilElement {
    }
    var HTMLOrionDrawerElement: {
        prototype: HTMLOrionDrawerElement;
        new (): HTMLOrionDrawerElement;
    };
    interface HTMLOrionDropdownElement extends Components.OrionDropdown, HTMLStencilElement {
    }
    var HTMLOrionDropdownElement: {
        prototype: HTMLOrionDropdownElement;
        new (): HTMLOrionDropdownElement;
    };
    interface HTMLOrionDropdownOptionElement extends Components.OrionDropdownOption, HTMLStencilElement {
    }
    var HTMLOrionDropdownOptionElement: {
        prototype: HTMLOrionDropdownOptionElement;
        new (): HTMLOrionDropdownOptionElement;
    };
    interface HTMLOrionErrorElement extends Components.OrionError, HTMLStencilElement {
    }
    var HTMLOrionErrorElement: {
        prototype: HTMLOrionErrorElement;
        new (): HTMLOrionErrorElement;
    };
    interface HTMLOrionHeaderElement extends Components.OrionHeader, HTMLStencilElement {
    }
    var HTMLOrionHeaderElement: {
        prototype: HTMLOrionHeaderElement;
        new (): HTMLOrionHeaderElement;
    };
    interface HTMLOrionLabelElement extends Components.OrionLabel, HTMLStencilElement {
    }
    var HTMLOrionLabelElement: {
        prototype: HTMLOrionLabelElement;
        new (): HTMLOrionLabelElement;
    };
    interface HTMLOrionLinkElement extends Components.OrionLink, HTMLStencilElement {
    }
    var HTMLOrionLinkElement: {
        prototype: HTMLOrionLinkElement;
        new (): HTMLOrionLinkElement;
    };
    interface HTMLOrionListElement extends Components.OrionList, HTMLStencilElement {
    }
    var HTMLOrionListElement: {
        prototype: HTMLOrionListElement;
        new (): HTMLOrionListElement;
    };
    interface HTMLOrionListItemElement extends Components.OrionListItem, HTMLStencilElement {
    }
    var HTMLOrionListItemElement: {
        prototype: HTMLOrionListItemElement;
        new (): HTMLOrionListItemElement;
    };
    interface HTMLOrionMessageElement extends Components.OrionMessage, HTMLStencilElement {
    }
    var HTMLOrionMessageElement: {
        prototype: HTMLOrionMessageElement;
        new (): HTMLOrionMessageElement;
    };
    interface HTMLOrionModalElement extends Components.OrionModal, HTMLStencilElement {
    }
    var HTMLOrionModalElement: {
        prototype: HTMLOrionModalElement;
        new (): HTMLOrionModalElement;
    };
    interface HTMLOrionNavButtonElement extends Components.OrionNavButton, HTMLStencilElement {
    }
    var HTMLOrionNavButtonElement: {
        prototype: HTMLOrionNavButtonElement;
        new (): HTMLOrionNavButtonElement;
    };
    interface HTMLOrionNavMenuElement extends Components.OrionNavMenu, HTMLStencilElement {
    }
    var HTMLOrionNavMenuElement: {
        prototype: HTMLOrionNavMenuElement;
        new (): HTMLOrionNavMenuElement;
    };
    interface HTMLOrionNoteElement extends Components.OrionNote, HTMLStencilElement {
    }
    var HTMLOrionNoteElement: {
        prototype: HTMLOrionNoteElement;
        new (): HTMLOrionNoteElement;
    };
    interface HTMLOrionPopoverElement extends Components.OrionPopover, HTMLStencilElement {
    }
    var HTMLOrionPopoverElement: {
        prototype: HTMLOrionPopoverElement;
        new (): HTMLOrionPopoverElement;
    };
    interface HTMLOrionProgressMeterElement extends Components.OrionProgressMeter, HTMLStencilElement {
    }
    var HTMLOrionProgressMeterElement: {
        prototype: HTMLOrionProgressMeterElement;
        new (): HTMLOrionProgressMeterElement;
    };
    interface HTMLOrionRadioButtonElement extends Components.OrionRadioButton, HTMLStencilElement {
    }
    var HTMLOrionRadioButtonElement: {
        prototype: HTMLOrionRadioButtonElement;
        new (): HTMLOrionRadioButtonElement;
    };
    interface HTMLOrionRadioButtonGroupElement extends Components.OrionRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLOrionRadioButtonGroupElement: {
        prototype: HTMLOrionRadioButtonGroupElement;
        new (): HTMLOrionRadioButtonGroupElement;
    };
    interface HTMLOrionStepperElement extends Components.OrionStepper, HTMLStencilElement {
    }
    var HTMLOrionStepperElement: {
        prototype: HTMLOrionStepperElement;
        new (): HTMLOrionStepperElement;
    };
    interface HTMLOrionSubheaderElement extends Components.OrionSubheader, HTMLStencilElement {
    }
    var HTMLOrionSubheaderElement: {
        prototype: HTMLOrionSubheaderElement;
        new (): HTMLOrionSubheaderElement;
    };
    interface HTMLOrionTabElement extends Components.OrionTab, HTMLStencilElement {
    }
    var HTMLOrionTabElement: {
        prototype: HTMLOrionTabElement;
        new (): HTMLOrionTabElement;
    };
    interface HTMLOrionTabPanelElement extends Components.OrionTabPanel, HTMLStencilElement {
    }
    var HTMLOrionTabPanelElement: {
        prototype: HTMLOrionTabPanelElement;
        new (): HTMLOrionTabPanelElement;
    };
    interface HTMLOrionTableElement extends Components.OrionTable, HTMLStencilElement {
    }
    var HTMLOrionTableElement: {
        prototype: HTMLOrionTableElement;
        new (): HTMLOrionTableElement;
    };
    interface HTMLOrionTableCellElement extends Components.OrionTableCell, HTMLStencilElement {
    }
    var HTMLOrionTableCellElement: {
        prototype: HTMLOrionTableCellElement;
        new (): HTMLOrionTableCellElement;
    };
    interface HTMLOrionTableHeaderElement extends Components.OrionTableHeader, HTMLStencilElement {
    }
    var HTMLOrionTableHeaderElement: {
        prototype: HTMLOrionTableHeaderElement;
        new (): HTMLOrionTableHeaderElement;
    };
    interface HTMLOrionTableRowElement extends Components.OrionTableRow, HTMLStencilElement {
    }
    var HTMLOrionTableRowElement: {
        prototype: HTMLOrionTableRowElement;
        new (): HTMLOrionTableRowElement;
    };
    interface HTMLOrionTabsElement extends Components.OrionTabs, HTMLStencilElement {
    }
    var HTMLOrionTabsElement: {
        prototype: HTMLOrionTabsElement;
        new (): HTMLOrionTabsElement;
    };
    interface HTMLOrionTextInputElement extends Components.OrionTextInput, HTMLStencilElement {
    }
    var HTMLOrionTextInputElement: {
        prototype: HTMLOrionTextInputElement;
        new (): HTMLOrionTextInputElement;
    };
    interface HTMLOrionTextareaElement extends Components.OrionTextarea, HTMLStencilElement {
    }
    var HTMLOrionTextareaElement: {
        prototype: HTMLOrionTextareaElement;
        new (): HTMLOrionTextareaElement;
    };
    interface HTMLOrionToggleElement extends Components.OrionToggle, HTMLStencilElement {
    }
    var HTMLOrionToggleElement: {
        prototype: HTMLOrionToggleElement;
        new (): HTMLOrionToggleElement;
    };
    interface HTMLOrionToggleGroupElement extends Components.OrionToggleGroup, HTMLStencilElement {
    }
    var HTMLOrionToggleGroupElement: {
        prototype: HTMLOrionToggleGroupElement;
        new (): HTMLOrionToggleGroupElement;
    };
    interface HTMLOrionTooltipElement extends Components.OrionTooltip, HTMLStencilElement {
    }
    var HTMLOrionTooltipElement: {
        prototype: HTMLOrionTooltipElement;
        new (): HTMLOrionTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "orion-accordion": HTMLOrionAccordionElement;
        "orion-button": HTMLOrionButtonElement;
        "orion-checkbox": HTMLOrionCheckboxElement;
        "orion-checkbox-group": HTMLOrionCheckboxGroupElement;
        "orion-chip": HTMLOrionChipElement;
        "orion-data-table": HTMLOrionDataTableElement;
        "orion-date-calendar-modal": HTMLOrionDateCalendarModalElement;
        "orion-date-input": HTMLOrionDateInputElement;
        "orion-drawer": HTMLOrionDrawerElement;
        "orion-dropdown": HTMLOrionDropdownElement;
        "orion-dropdown-option": HTMLOrionDropdownOptionElement;
        "orion-error": HTMLOrionErrorElement;
        "orion-header": HTMLOrionHeaderElement;
        "orion-label": HTMLOrionLabelElement;
        "orion-link": HTMLOrionLinkElement;
        "orion-list": HTMLOrionListElement;
        "orion-list-item": HTMLOrionListItemElement;
        "orion-message": HTMLOrionMessageElement;
        "orion-modal": HTMLOrionModalElement;
        "orion-nav-button": HTMLOrionNavButtonElement;
        "orion-nav-menu": HTMLOrionNavMenuElement;
        "orion-note": HTMLOrionNoteElement;
        "orion-popover": HTMLOrionPopoverElement;
        "orion-progress-meter": HTMLOrionProgressMeterElement;
        "orion-radio-button": HTMLOrionRadioButtonElement;
        "orion-radio-button-group": HTMLOrionRadioButtonGroupElement;
        "orion-stepper": HTMLOrionStepperElement;
        "orion-subheader": HTMLOrionSubheaderElement;
        "orion-tab": HTMLOrionTabElement;
        "orion-tab-panel": HTMLOrionTabPanelElement;
        "orion-table": HTMLOrionTableElement;
        "orion-table-cell": HTMLOrionTableCellElement;
        "orion-table-header": HTMLOrionTableHeaderElement;
        "orion-table-row": HTMLOrionTableRowElement;
        "orion-tabs": HTMLOrionTabsElement;
        "orion-text-input": HTMLOrionTextInputElement;
        "orion-textarea": HTMLOrionTextareaElement;
        "orion-toggle": HTMLOrionToggleElement;
        "orion-toggle-group": HTMLOrionToggleGroupElement;
        "orion-tooltip": HTMLOrionTooltipElement;
    }
}
declare namespace LocalJSX {
    interface OrionAccordion {
        /**
          * Chevrons are on the right by default
         */
        "chevronLeft"?: boolean;
        /**
          * Accordion container border
         */
        "hasContainer"?: boolean;
        /**
          * Emitted when the accordion is toggled
         */
        "onToggle"?: (event: OrionAccordionCustomEvent<OrionAccordionToggleEventData>) => void;
        /**
          * Accordion is closed by default
         */
        "open"?: boolean;
    }
    interface OrionButton {
        /**
          * The disabled state
         */
        "disabled"?: boolean;
        /**
          * The icon name
         */
        "iconName"?: string;
        /**
          * The icon position
         */
        "iconRight"?: boolean;
        /**
          * The small state
         */
        "small"?: boolean;
        /**
          * The sticky state. A default button will display on desktop.
         */
        "sticky"?: boolean;
        /**
          * The sticky state for mobile only. Button will hide on desktop.
         */
        "stickyMobile"?: boolean;
        /**
          * The button type
         */
        "type"?: OrionButtonTypeOptions;
        /**
          * The button variant
         */
        "variant"?: OrionButtonVariantOptions;
    }
    interface OrionCheckbox {
        /**
          * The checked state of the checkbox
         */
        "checked"?: boolean;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * The indeterminate state of the checkbox (overridden by checked if both are true)
         */
        "indeterminate"?: boolean;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * CustomEvent `detail` will be the new value
         */
        "onValueChanged"?: (event: OrionCheckboxCustomEvent<{ value: string; checked: boolean }>) => void;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * The input value
         */
        "value"?: string;
    }
    interface OrionCheckboxGroup {
        /**
          * Disable all checkboxes in group
         */
        "disabled"?: boolean;
        /**
          * The inline state of the checkbox group
         */
        "inline"?: boolean;
    }
    interface OrionChip {
        /**
          * Toggles the ability to dismiss the chip via a close button on right of the chip
         */
        "dismissible"?: boolean;
        /**
          * Prop used to show/hide chip
         */
        "isOpen"?: boolean;
        /**
          * Prop used to to display a solid background color
         */
        "solidBg"?: boolean;
        /**
          * Stylistic variations for the chip type. - **success** - results in a green chip - **high** - results in a red chip - **medium** - results in an orange chip - **low** - results in a yellow chip - **info** - results in a blue chip - **custom** - results in a custom color chip (see `--orion-chip-color__bg` and `--orion-chip-color__text` css variables)
         */
        "variant"?: OrionChipVariantOptions;
    }
    interface OrionDataTable {
        /**
          * Adds in a checkbox column to the left hand side of the table
         */
        "checkbox"?: boolean;
        /**
          * An array of column headers
         */
        "headers"?: Headers;
        /**
          * Hides columns by index
         */
        "hiddenColumns"?: number[];
        /**
          * Emits event when a column header's toggle is pressed
         */
        "onOrionCheckboxColumnToggled"?: (event: OrionDataTableCustomEvent<OrionCheckboxColumnToggledEvent>) => void;
        /**
          * Emits event when a checkbox or select has it's value changed
         */
        "onOrionTableUpdated"?: (event: OrionDataTableCustomEvent<OrionTableUpdatedEvent>) => void;
        /**
          * Pins n columns to the left hand side of the table
         */
        "pin"?: number;
        /**
          * A 2D array for row data
         */
        "rows"?: Rows;
        /**
          * Controls whether the table should be sortable or not
         */
        "sortable"?: boolean;
        /**
          * Visual variant for table
         */
        "variant"?: 'lined' | 'striped';
    }
    interface OrionDateCalendarModal {
        /**
          * Format to be used by the date inputs & calendar Follows spec at https://flatpickr.js.org/formatting/
         */
        "dateFormat": string;
        /**
          * Selected dates to show
         */
        "dates"?: string[];
        /**
          * Label for first date
         */
        "firstDateLabel": string;
        /**
          * Config for flatpickr
         */
        "flatpickrConfig": Partial<BaseOptions>;
        /**
          * Whether the modal is open or not
         */
        "isOpen": boolean;
        /**
          * Label to appear at the top of the modal
         */
        "label": string;
        /**
          * Emits `closeDateModal` event that `orion-date-input` can listen for
         */
        "onCloseDateModal"?: (event: OrionDateCalendarModalCustomEvent<any>) => void;
        /**
          * Emits `selectModalDates` event that `orion-date-input` can listen for
         */
        "onSelectModalDates"?: (event: OrionDateCalendarModalCustomEvent<{ dates: Date[] }>) => void;
        /**
          * If the flatpickr config is ranged or not
         */
        "range": boolean;
        /**
          * Label for second date
         */
        "secondDateLabel"?: string | undefined;
        /**
          * Month that flatpickr calendar starts at TODO: base this off min date or create a buffer + scroll to current month
         */
        "startingDate"?: Date;
    }
    interface OrionDateInput {
        /**
          * Format to be used by the date inputs & calendar Follows spec at https://flatpickr.js.org/formatting/
         */
        "dateFormat"?: string;
        /**
          * Disabled state of input
         */
        "disabled"?: boolean;
        /**
          * Error state of input
         */
        "error"?: boolean;
        /**
          * Shows the first-label inline with the input
         */
        "inline"?: boolean;
        /**
          * Inclusive maximum date (time is removed from limit)
         */
        "maxDate"?: Date | string;
        /**
          * Inclusive minimum date (time is removed from limit)
         */
        "minDate"?: Date | string;
        /**
          * Makes the calendar show two months
         */
        "multiMonth"?: boolean;
        /**
          * Emits 'orionDateSelected' event when a date is selected
         */
        "onOrionDateSelected"?: (event: OrionDateInputCustomEvent<DateSelectionEvent>) => void;
        /**
          * Placeholder for the date inputs
         */
        "placeholder"?: string;
        /**
          * Shows two inputs, and calendar is in range mode
         */
        "range"?: boolean;
    }
    interface OrionDrawer {
        /**
          * Prop used to show/hide drawer
         */
        "isOpen"?: boolean;
        /**
          * Emits event when footer buttons are clicked
         */
        "onOrionDrawerFooterBtnClicked"?: (event: OrionDrawerCustomEvent<{ variant: string }>) => void;
        /**
          * Animates drawer in from left, right, or bottom
         */
        "openFrom"?: OrionDrawerOpenOptions;
    }
    interface OrionDropdown {
        /**
          * Disabled state of dropdown
         */
        "disabled"?: boolean;
        /**
          * Error state of dropdown
         */
        "error"?: boolean;
        "isOpen"?: boolean;
        /**
          * form name of dropdown
         */
        "name"?: string;
        /**
          * Emits event that users can listen to
         */
        "onValueChanged"?: (event: OrionDropdownCustomEvent<{ value: string; id?: string }>) => void;
        "placeholder"?: string;
        /**
          * Required attribute
         */
        "required"?: boolean;
        "summary"?: string;
        /**
          * value of currently selected option
         */
        "value"?: string;
    }
    interface OrionDropdownOption {
        /**
          * The checked state of the dropdown option
         */
        "checked"?: boolean;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Focuses the dropdown option
         */
        "focusable"?: boolean;
        /**
          * The label for the input element passed in as a slot
         */
        "label"?: string;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Emit `dropdownOptionChanged` event that `orion-dropdown` can listen for
         */
        "onDropdownOptionChanged"?: (event: OrionDropdownOptionCustomEvent<{ value: string; label: string; checked: boolean }>) => void;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * The input value
         */
        "value"?: string;
    }
    interface OrionError {
    }
    interface OrionHeader {
        /**
          * Application/page title heading
         */
        "heading"?: string;
        /**
          * Heading placement (left, center, right). Defaults to center.
         */
        "headingPlacement"?: OrionHeaderHeadingPlacementOptions;
        /**
          * Logo alt text
         */
        "logoAlt"?: string;
        /**
          * Logo HREF
         */
        "logoHref"?: string;
        /**
          * Logo placement (left, center, right). Defaults to left.
         */
        "logoPlacement"?: OrionHeaderLogoPlacementOptions;
        /**
          * Hide logo
         */
        "noLogo"?: boolean;
        /**
          * Application/page title subheading
         */
        "subheading"?: string;
    }
    interface OrionLabel {
        /**
          * Shows the disabled state
         */
        "disabled"?: boolean;
        /**
          * Shows the error state
         */
        "error"?: boolean;
    }
    interface OrionLink {
        /**
          * The link disabled state
         */
        "disabled"?: boolean;
        /**
          * The link download
         */
        "download"?: string;
        /**
          * The link href
         */
        "href"?: string;
        /**
          * The icon position
         */
        "iconLeft"?: boolean;
        /**
          * The icon name
         */
        "iconName"?: string;
        /**
          * No underline
         */
        "noUnderline"?: boolean;
        /**
          * The link rel
         */
        "rel"?: string;
        /**
          * The link target
         */
        "target"?: OrionLinkTargetOptions;
    }
    interface OrionList {
    }
    interface OrionListItem {
        /**
          * Disables the list item
         */
        "disabled"?: boolean;
        /**
          * Adds an icon to the list item
         */
        "hasIcon"?: boolean;
        /**
          * Adds a marker to the list item
         */
        "hasMarker"?: boolean;
        /**
          * Adds a trailing icon to the list item. The href property will add a trailing icon automatically
         */
        "hasTrailingIcon"?: boolean;
        /**
          * Adds a link to the list item. Trailing icon will be added automatically
         */
        "href"?: string;
        /**
          * Name of the icon to be added to the list item
         */
        "iconName"?: string;
        /**
          * Name of the trailing icon to be added to the list item. Deaults to chevron_right
         */
        "trailingIconName"?: string;
    }
    interface OrionMessage {
        /**
          * Toggles the ability to dismiss the message via a close button in the top right of the message
         */
        "dismissible"?: boolean;
        /**
          * Toggles the display of the icon in the top left of the message
         */
        "hasIcon"?: boolean;
        /**
          * Optional heading text for the message that appears above message body message
         */
        "heading"?: string;
        /**
          * Prop used to show/hide message
         */
        "isOpen"?: boolean;
        /**
          * Optional time for the mobile overlay to display in milliseconds. Default is 3000.
         */
        "overlayTime"?: number;
        /**
          * Stylistic variations for the message type. - **success** - results in a green message - **success-overlay** - results in a full screen overlay on mobile - **high** - results in a red message - **medium** - results in an orange message - **low** - results in a yellow message - **info** - results in a blue message
         */
        "variant"?: OrionMessageVariantOptions;
    }
    interface OrionModal {
        /**
          * Toggles visibility of the close icon in the top right of the modal
         */
        "hasCancelIcon"?: boolean;
        /**
          * Adds an icon to the modal header
         */
        "hasIcon"?: boolean;
        /**
          * Name of the icon to be added to the modal header
         */
        "iconName"?: string;
        /**
          * Set this to have the modal take up the full screen
         */
        "isFullscreen"?: boolean;
        /**
          * Set this to have the modal take up the full screen on mobile only
         */
        "isFullscreenMobile"?: boolean;
        /**
          * Toggles the visibility of the modal
         */
        "isOpen"?: boolean;
        /**
          * Set this to center-align the modal title
         */
        "isTitleCentered"?: boolean;
        /**
          * Emits `modalClose` event when isOpen is set to false internally
         */
        "onModalClose"?: (event: OrionModalCustomEvent<any>) => void;
        /**
          * Emits event when footer buttons are clicked
         */
        "onOrionModalFooterBtnClicked"?: (event: OrionModalCustomEvent<{ variant: string }>) => void;
        /**
          * Disables the primary button
         */
        "primaryButtonDisabled"?: boolean;
        /**
          * Disables the secondary button
         */
        "secondaryButtonDisabled"?: boolean;
    }
    interface OrionNavButton {
        /**
          * The icon name
         */
        "iconName"?: string;
        /**
          * The active state of the button
         */
        "isActive"?: boolean;
        /**
          * The position of the label
         */
        "labelPosition"?: 'left' | 'right';
    }
    interface OrionNavMenu {
        /**
          * Toggles visibility of the close icon in the right of the nav menu header
         */
        "hasCloseIcon"?: boolean;
        /**
          * Prop used to show/hide nav menu
         */
        "isOpen"?: boolean;
        "onNavMenuClose"?: (event: OrionNavMenuCustomEvent<any>) => void;
    }
    interface OrionNote {
    }
    interface OrionPopover {
        /**
          * The placement of the popper relative to its trigger
         */
        "placement"?: | 'top'
    | 'top-start'
    | 'top-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'left'
    | 'left-start'
    | 'left-end';
        /**
          * width should be between 100px and 640px
         */
        "popperWidth"?: number;
    }
    interface OrionProgressMeter {
        /**
          * Shows progress meter in circle format
         */
        "isCircle"?: boolean;
        /**
          * The maximum possible value
         */
        "max"?: number;
        /**
          * The percent of target value where progress meter color will change from error to warn (decimal value between 0 and 1)
         */
        "percentOfTarget"?: number;
        /**
          * Amount of segments to divide progress meter into
         */
        "segments"?: number;
        /**
          * Display value in center of circle
         */
        "showValue"?: boolean;
        /**
          * The circle size
         */
        "size"?: OrionSizeOptions;
        /**
          * The target value
         */
        "target"?: number;
        /**
          * The current value
         */
        "value"?: number;
    }
    interface OrionRadioButton {
        /**
          * The checked state of the radio button
         */
        "checked"?: boolean;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Focuses the radio button. This method is used internally by the `orion-radio-button-group` component. Do not use it directly. Use the `orion-radio-button-group` component instead.
         */
        "focusable"?: boolean;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Emit `radioButtonChanged` event that `orion-radio-button-group` can listen for
         */
        "onRadioButtonChanged"?: (event: OrionRadioButtonCustomEvent<{ value: string }>) => void;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * The input value
         */
        "value"?: string;
    }
    interface OrionRadioButtonGroup {
        /**
          * Disabled radio group
         */
        "disabled"?: boolean;
        /**
          * The inline display of the radio group
         */
        "inline"?: boolean;
        /**
          * form name of radio buttons
         */
        "name"?: string;
        /**
          * Emits event that users can listen to
         */
        "onValueChanged"?: (event: OrionRadioButtonGroupCustomEvent<{ value: string }>) => void;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * value of currently checked radio button
         */
        "value"?: string;
    }
    interface OrionStepper {
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * Hide the current tally
         */
        "hideTally"?: boolean;
        /**
          * Max value that the stepper can be incremented to
         */
        "max"?: number;
        /**
          * Min value that the stepper can be decremented to
         */
        "min"?: number;
        /**
          * CustomEvent `detail` will be the new value
         */
        "onValueChanged"?: (event: OrionStepperCustomEvent<{ value: number }>) => void;
        /**
          * Step size to increment/decrement
         */
        "step"?: number;
        /**
          * The current value
         */
        "value"?: number;
    }
    interface OrionSubheader {
        /**
          * Toggles visibility of the close icon in the right of the subheader
         */
        "hasCloseIcon"?: boolean;
        /**
          * Prop used to show/hide subheader
         */
        "isOpen"?: boolean;
        "onSubheaderClose"?: (event: OrionSubheaderCustomEvent<any>) => void;
    }
    interface OrionTab {
    }
    interface OrionTabPanel {
        /**
          * Specifies which orion-tabs element this panel is bound to. Set by a parent orion-tabs component.
         */
        "for"?: string;
        /**
          * Marks the panel as active or not
         */
        "isActive"?: boolean;
        /**
          * Index of tab that controls if this panel is active. Set by a parent orion-tabs component.
         */
        "panelIndex"?: number;
    }
    interface OrionTable {
        /**
          * Controls whether the table should be sortable or not
         */
        "sortable"?: boolean;
        /**
          * Visual variant for table
         */
        "variant"?: 'lined' | 'striped';
    }
    interface OrionTableCell {
    }
    interface OrionTableHeader {
        /**
          * Sets the text alignment for the column
         */
        "align"?: Alignment;
    }
    interface OrionTableRow {
        "onChildrenParsed"?: (event: OrionTableRowCustomEvent<{ headerElements: Element[]; rowElements: Element[] }>) => void;
    }
    interface OrionTabs {
        /**
          * Default and current active tab index
         */
        "activeTab"?: number;
        /**
          * The minimum width for tabs
         */
        "minTabWidth"?: string;
        /**
          * Emits event when a tab header is clicked
         */
        "onOrionTabSelected"?: (event: OrionTabsCustomEvent<TabSelectionEvent>) => void;
        /**
          * Component will scroll to the starting active tab
         */
        "scrollToStartingActiveTab"?: boolean;
    }
    interface OrionTextInput {
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "autocomplete"?: string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "dirname"?: string;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "form"?: string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "list"?: string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "maxlength"?: number;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "minlength"?: number;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "multiple"?: boolean;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "name"?: string;
        /**
          * CustomEvent `detail` will be the new value
         */
        "onValueChanged"?: (event: OrionTextInputCustomEvent<{ value: string }>) => void;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "pattern"?: string;
        /**
          * The input placeholder
         */
        "placeholder"?: string;
        /**
          * * Same as for [HTML `input` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
         */
        "readonly"?: boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * The input type
         */
        "type"?: OrionTextInputTypeOptions;
        /**
          * The input value
         */
        "value"?: string;
    }
    interface OrionTextarea {
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "autocorrect"?: string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "autofocus"?: boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "cols"?: number;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Shows error state
         */
        "error"?: boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "form"?: string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "maxLength"?: number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "minLength"?: number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "name"?: string;
        /**
          * CustomEvent `detail` will be the new value
         */
        "onValueChanged"?: (event: OrionTextareaCustomEvent<{ value: string }>) => void;
        /**
          * The input placeholder
         */
        "placeholder"?: string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "readonly"?: boolean;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * Shows the resize option
         */
        "resize"?: boolean;
        /**
          * Shows the resize horizonal-only option
         */
        "resizeHorizontal"?: boolean;
        /**
          * Shows the resize vertical-only option
         */
        "resizeVertical"?: boolean;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "rows"?: number;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "spellcheck"?: boolean;
        /**
          * The input value
         */
        "value"?: string;
        /**
          * * Same as for [HTML `textarea` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)
         */
        "wrap"?: string;
    }
    interface OrionToggle {
        /**
          * The checked state of the toggle
         */
        "checked"?: boolean;
        /**
          * Disables interactions
         */
        "disabled"?: boolean;
        /**
          * Justify the content of the toggle and label
         */
        "justify"?: boolean;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * CustomEvent `detail` will be the new value
         */
        "onValueChanged"?: (event: OrionToggleCustomEvent<{ value: string; checked: boolean }>) => void;
        /**
          * Required attribute
         */
        "required"?: boolean;
        /**
          * The input value
         */
        "value"?: string;
    }
    interface OrionToggleGroup {
        /**
          * Disable all toggles in group
         */
        "disabled"?: boolean;
        /**
          * The inline state of the toggle group
         */
        "inline"?: boolean;
        /**
          * Justify the content of the toggle group
         */
        "justify"?: boolean;
    }
    interface OrionTooltip {
        "tooltipPosition"?: 'top' | 'bottom';
        "tooltipWidth"?: number;
    }
    interface IntrinsicElements {
        "orion-accordion": OrionAccordion;
        "orion-button": OrionButton;
        "orion-checkbox": OrionCheckbox;
        "orion-checkbox-group": OrionCheckboxGroup;
        "orion-chip": OrionChip;
        "orion-data-table": OrionDataTable;
        "orion-date-calendar-modal": OrionDateCalendarModal;
        "orion-date-input": OrionDateInput;
        "orion-drawer": OrionDrawer;
        "orion-dropdown": OrionDropdown;
        "orion-dropdown-option": OrionDropdownOption;
        "orion-error": OrionError;
        "orion-header": OrionHeader;
        "orion-label": OrionLabel;
        "orion-link": OrionLink;
        "orion-list": OrionList;
        "orion-list-item": OrionListItem;
        "orion-message": OrionMessage;
        "orion-modal": OrionModal;
        "orion-nav-button": OrionNavButton;
        "orion-nav-menu": OrionNavMenu;
        "orion-note": OrionNote;
        "orion-popover": OrionPopover;
        "orion-progress-meter": OrionProgressMeter;
        "orion-radio-button": OrionRadioButton;
        "orion-radio-button-group": OrionRadioButtonGroup;
        "orion-stepper": OrionStepper;
        "orion-subheader": OrionSubheader;
        "orion-tab": OrionTab;
        "orion-tab-panel": OrionTabPanel;
        "orion-table": OrionTable;
        "orion-table-cell": OrionTableCell;
        "orion-table-header": OrionTableHeader;
        "orion-table-row": OrionTableRow;
        "orion-tabs": OrionTabs;
        "orion-text-input": OrionTextInput;
        "orion-textarea": OrionTextarea;
        "orion-toggle": OrionToggle;
        "orion-toggle-group": OrionToggleGroup;
        "orion-tooltip": OrionTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "orion-accordion": LocalJSX.OrionAccordion & JSXBase.HTMLAttributes<HTMLOrionAccordionElement>;
            "orion-button": LocalJSX.OrionButton & JSXBase.HTMLAttributes<HTMLOrionButtonElement>;
            "orion-checkbox": LocalJSX.OrionCheckbox & JSXBase.HTMLAttributes<HTMLOrionCheckboxElement>;
            "orion-checkbox-group": LocalJSX.OrionCheckboxGroup & JSXBase.HTMLAttributes<HTMLOrionCheckboxGroupElement>;
            "orion-chip": LocalJSX.OrionChip & JSXBase.HTMLAttributes<HTMLOrionChipElement>;
            "orion-data-table": LocalJSX.OrionDataTable & JSXBase.HTMLAttributes<HTMLOrionDataTableElement>;
            "orion-date-calendar-modal": LocalJSX.OrionDateCalendarModal & JSXBase.HTMLAttributes<HTMLOrionDateCalendarModalElement>;
            "orion-date-input": LocalJSX.OrionDateInput & JSXBase.HTMLAttributes<HTMLOrionDateInputElement>;
            "orion-drawer": LocalJSX.OrionDrawer & JSXBase.HTMLAttributes<HTMLOrionDrawerElement>;
            "orion-dropdown": LocalJSX.OrionDropdown & JSXBase.HTMLAttributes<HTMLOrionDropdownElement>;
            "orion-dropdown-option": LocalJSX.OrionDropdownOption & JSXBase.HTMLAttributes<HTMLOrionDropdownOptionElement>;
            "orion-error": LocalJSX.OrionError & JSXBase.HTMLAttributes<HTMLOrionErrorElement>;
            "orion-header": LocalJSX.OrionHeader & JSXBase.HTMLAttributes<HTMLOrionHeaderElement>;
            "orion-label": LocalJSX.OrionLabel & JSXBase.HTMLAttributes<HTMLOrionLabelElement>;
            "orion-link": LocalJSX.OrionLink & JSXBase.HTMLAttributes<HTMLOrionLinkElement>;
            "orion-list": LocalJSX.OrionList & JSXBase.HTMLAttributes<HTMLOrionListElement>;
            "orion-list-item": LocalJSX.OrionListItem & JSXBase.HTMLAttributes<HTMLOrionListItemElement>;
            "orion-message": LocalJSX.OrionMessage & JSXBase.HTMLAttributes<HTMLOrionMessageElement>;
            "orion-modal": LocalJSX.OrionModal & JSXBase.HTMLAttributes<HTMLOrionModalElement>;
            "orion-nav-button": LocalJSX.OrionNavButton & JSXBase.HTMLAttributes<HTMLOrionNavButtonElement>;
            "orion-nav-menu": LocalJSX.OrionNavMenu & JSXBase.HTMLAttributes<HTMLOrionNavMenuElement>;
            "orion-note": LocalJSX.OrionNote & JSXBase.HTMLAttributes<HTMLOrionNoteElement>;
            "orion-popover": LocalJSX.OrionPopover & JSXBase.HTMLAttributes<HTMLOrionPopoverElement>;
            "orion-progress-meter": LocalJSX.OrionProgressMeter & JSXBase.HTMLAttributes<HTMLOrionProgressMeterElement>;
            "orion-radio-button": LocalJSX.OrionRadioButton & JSXBase.HTMLAttributes<HTMLOrionRadioButtonElement>;
            "orion-radio-button-group": LocalJSX.OrionRadioButtonGroup & JSXBase.HTMLAttributes<HTMLOrionRadioButtonGroupElement>;
            "orion-stepper": LocalJSX.OrionStepper & JSXBase.HTMLAttributes<HTMLOrionStepperElement>;
            "orion-subheader": LocalJSX.OrionSubheader & JSXBase.HTMLAttributes<HTMLOrionSubheaderElement>;
            "orion-tab": LocalJSX.OrionTab & JSXBase.HTMLAttributes<HTMLOrionTabElement>;
            "orion-tab-panel": LocalJSX.OrionTabPanel & JSXBase.HTMLAttributes<HTMLOrionTabPanelElement>;
            "orion-table": LocalJSX.OrionTable & JSXBase.HTMLAttributes<HTMLOrionTableElement>;
            "orion-table-cell": LocalJSX.OrionTableCell & JSXBase.HTMLAttributes<HTMLOrionTableCellElement>;
            "orion-table-header": LocalJSX.OrionTableHeader & JSXBase.HTMLAttributes<HTMLOrionTableHeaderElement>;
            "orion-table-row": LocalJSX.OrionTableRow & JSXBase.HTMLAttributes<HTMLOrionTableRowElement>;
            "orion-tabs": LocalJSX.OrionTabs & JSXBase.HTMLAttributes<HTMLOrionTabsElement>;
            "orion-text-input": LocalJSX.OrionTextInput & JSXBase.HTMLAttributes<HTMLOrionTextInputElement>;
            "orion-textarea": LocalJSX.OrionTextarea & JSXBase.HTMLAttributes<HTMLOrionTextareaElement>;
            "orion-toggle": LocalJSX.OrionToggle & JSXBase.HTMLAttributes<HTMLOrionToggleElement>;
            "orion-toggle-group": LocalJSX.OrionToggleGroup & JSXBase.HTMLAttributes<HTMLOrionToggleGroupElement>;
            "orion-tooltip": LocalJSX.OrionTooltip & JSXBase.HTMLAttributes<HTMLOrionTooltipElement>;
        }
    }
}
